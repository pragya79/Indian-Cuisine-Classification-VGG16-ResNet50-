# -*- coding: utf-8 -*-
"""IndianCuisineClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zKxVRj7aDFfb0q__3pQl2ohzVsxwBbcQ
"""

from google.colab import drive
drive.mount('/content/drive')

!nvidia-smi

import os
path='/content/drive/MyDrive/reduced_dataset'

#removing corrupted images
from PIL import Image

def check_images(directory):
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                img = Image.open(file_path)
                img.verify()
            except (IOError, SyntaxError) as e:
                print(f"Bad file: {file_path}")
                os.remove(file_path)  # Remove the corrupted file

# Check and clean your dataset directory
dataset_path = '/content/drive/MyDrive/reduced_dataset'
check_images(dataset_path)

import tensorflow as tf
from tensorflow import keras

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_data=ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2
)

train_gen=train_data.flow_from_directory(
    path,
    target_size=(224,224),
    class_mode='categorical',
    batch_size=32,
    subset='training',
    shuffle=True
)

validation_gen=train_data.flow_from_directory(
    path,
    target_size=(224,224),
    class_mode='categorical',
    batch_size=32,
    subset='validation',
    shuffle=True
)

print(train_gen.class_indices)
print(validation_gen.class_indices)

from tensorflow.keras import layers,models
from tensorflow.keras.applications import VGG16

reference_model=VGG16(weights='imagenet',include_top=False, input_shape=(224, 224, 3))

# freezing the layers
for layer in reference_model.layers:
    layer.trainable=False

model=models.Sequential([
    reference_model,
    layers.Flatten(),
    layers.Dense(units=256,activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(units=4,activation='softmax')
])

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),
    loss='categorical_crossentropy',
    metrics=['accuracy']

)

print(layer,layer.trainable)

trained_model=model.fit(
    train_gen,
    epochs=10,
    validation_data=validation_gen,
    steps_per_epoch=len(train_gen),
    validation_steps=len(validation_gen)
)

"""**Saving the Model as .h5 file**"""

saved_model=model.save('/content/drive/MyDrive/saved_model/classifier.h5')

from keras.models import load_model
model = load_model('/content/drive/MyDrive/saved_model/classifier.h5')

model.summary()

y_predict=model.predict(validation_gen)

model.evaluate(validation_gen)

from sklearn.metrics import classification_report
y_true=validation_gen.classes
print(classification_report(y_true,y_predict.argmax(axis=1)))

#ploting epoch vs val_acc & epoch vs val_loss graph
import matplotlib.pyplot as plt
training_loss=trained_model.history['loss']
test_loss=trained_model.history['val_loss']
training_acc=trained_model.history['accuracy']
test_acc=trained_model.history['val_accuracy']
epochs=range(len(training_loss))

plt.title('epoch vs loss')
plt.plot(epochs,training_loss,label='training_loss')
plt.plot(epochs,test_loss,label='test_loss')
plt.legend()
plt.show()

plt.title('epoch vs acc')
plt.plot(epochs,training_acc,label='training_acc')
plt.plot(epochs,test_acc,label='test_acc')
plt.legend()
plt.show()

"""Using the Saved model to predict new images as one of the classes"""

from keras.preprocessing import image
from keras.models import load_model
import numpy as np
#function to predict images
def predict_image(image_path,saved_model):
  img=image.load_img(image_path,target_size=(224,224))
  img=image.img_to_array(img)
  img=img/255.0

  img=np.expand_dims(img,axis=0)

  prediction=saved_model.predict(img)
  classes=['North_Indian','East_Indian','West_Indian','South_Indian']
  predicted_class=classes[np.argmax(prediction)]

  return predicted_class

saved_model=load_model('/content/drive/MyDrive/saved_model/classifier.h5')
image_path='/content/drive/MyDrive/new.jfif'
predicted_class=predict_image(image_path,saved_model)
print(predicted_class)
